/*!
   \class QOculusRift
   \inmodule QtStereoscopy

   \brief The QOculusRift class adds support for the Oculus Rift head-mounted display device.
*/
/*!
   \fn QOculusRift::QOculusRift(const unsigned int& index = 0, const bool& forceDebugDevice = false)
   \brief Constructs a QOculusRift that is attached to a device with the specified \a index.

   For debugging purposes, a debug device can be created by setting \a forceDebugDevice to \c true.
*/
/*!
   \fn QString QOculusRift::productName() const
*/
/*!
   \fn QString QOculusRift::manufacturerName() const
*/
/*!
   \fn QSize QOculusRift::resolution() const
*/
/*!
   \fn unsigned int QOculusRift::refreshRate() const
*/
/*!
   \fn bool QOculusRift::vsyncEnabled() const
   \brief Returns \c true if vertical synchronization (VSYNC) is enabled, \c false otherwise.
*/
/*!
   \fn void QOculusRift::enableVsync(const bool enable)
   \brief If \a enable is set to \c true then vertical synchronization (VSYNC) is enabled, otherwise it is disabled.
   \warning Disabling this feature may break VR immersion.
*/
/*!
   \fn float QOculusRift::interpupillaryDistance() const
*/
/*!
   \fn voiid QOculusRift::setInterpupillaryDistance(const float& value)
   \span {style="display:none"}{\a value}
*/
/*!
   \fn float QOculusRift::eyeHeight() const
*/
/*!
   \fn voiid QOculusRift::setEyeHeight(const float& value)
   \span {style="display:none"}{\a value}
*/
/*!
   \fn bool QOculusRift::trackingAvailable() const
*/
/*!
   \fn bool QOculusRift::trackingCameraAvailable() const
   \brief Returns true if the positional tracking camera is available and can be used by this application; false otherwise.
*/
/*!
   \fn void QOculusRift::resetTracking()
   \brief Resets the tracking origin to the headset's current location and sets the yaw origin to the current headset yaw value.

   Note that the tracking origin is set on a per-application basis and so switching focus between different applications will
   switch the tracking origin too.
*/
/*!
   \fn bool QOculusRift::orientationTrackingAvailable() const
*/
/*!
   \fn bool QOculusRift::orientationTrackingEnabled() const
*/
/*!
   \fn void QOculusRift::enableOrientationTracking(const bool enable)
   \span {style="display:none"}{\a enable}
*/
/*!
   \fn QQuaternion QOculusRift::headOrientation() const
*/
/*!
   \fn bool QOculusRift::positionalTrackingAvailable() const
*/
/*!
   \fn bool QOculusRift::positionalTrackingEnabled() const
*/
/*!
   \fn void QOculusRift::enablePositionalTracking(const bool enable)
   \span {style="display:none"}{\a enable}
*/
/*!
   \fn QVector3D QOculusRift::headPosition() const
*/
/*!
   \fn QOculusRift::TrackingFrustum QOculusRift::positionalTrackingFrustum() const
   \brief Returns the tracking camera's frustum.

   The frustum contains the horizontal and vertical FOV in radians, as well as near and far clipping plane distances in meters.
*/
/*!
   \fn bool QOculusRift::eyeTrackingAvailable() const
*/
/*!
   \fn bool QOculusRift::eyeTrackingEnabled() const
*/
/*!
   \fn void QOculusRift::enableEyeTracking(const bool enable)
   \span {style="display:none"}{\a enable}
*/
/*!
   \fn QPoint QOculusRift::eyePosition() const
*/
/*!
   \fn bool QOculusRift::yawCorrectionEnabled() const
   \brief Returns \c true if yaw correction is enabled, \c false otherwise.
*/
/*!
   \fn void QOculusRift::enableYawCorrection(const bool enable)
   \brief If \a enable is set to \c true then yaw correction is enabled, otherwise it is disabled.
*/
/*!
   \fn bool QOculusRift::lowPersistenceEnabled() const
   \brief Returns \c true if low-persistence is enabled, \c false otherwise.
*/
/*!
   \fn void QOculusRift::enableLowPersistence(const bool enable)
   \brief If \a enable is set to \c true then low-persistence is enabled, otherwise it is disabled.
*/
/*!
   \fn bool QOculusRift::latencyTestingEnabled() const
   \brief Returns \c true if latency testing is enabled, \c false otherwise.
*/
/*!
   \fn void QOculusRift::enableLatencyTesting(const bool enable)
   \brief If \a enable is set to \c true then latency testing is enabled, otherwise it is disabled.
*/
/*!
   \fn bool QOculusRift::dynamicPredictionEnabled() const
   \brief Returns \c true if dynamic prediction is enabled, \c false otherwise.
*/
/*!
   \fn void QOculusRift::enableDynamicPrediction(const bool enable)
   \brief If \a enable is set to \c true then dynamic prediction is enabled, otherwise it is disabled.
*/
/*!
   \fn const ovrHmdDesc& QOculusRift::descriptor() const
   \brief Returns the device descriptor.
*/
/*!
   \fn const ovrHmdType& QOculusRift::type() const
   \brief Returns the device type.
*/
/*!
   \fn const bool& QOculusRift::isDebugDevice() const
   \brief Returns \c true if this is a debug device, \c false otherwise.
*/
/*!
   \fn const ovrHmd& QOculusRift::handle() const
   \brief Returns the underlying device handle.
*/
/*!
   \fn QOculusRift::operator const ovrHmd&() const
   \sa handle()
   \brief Converts this instance into its underlying device handle.
*/
/*!
   \fn const short int& QOculusRift::vendorId() const
   \brief Returns the device's vendor identifier.
*/
/*!
   \fn const short int& QOculusRift::productId() const
   \brief Returns the device's product identifier.
*/
/*!
   \fn QString QOculusRift::serialNumber() const
   \brief Returns the device's serial number.
*/
/*!
   \fn short int QOculusRift::majorFirmwareVersion() const
   \brief Returns the device's major firmware version.
*/
/*!
   \fn short int QOculusRift::minorFirmwareVersion() const
   \brief Returns the device's minor firmware version.
*/
/*!
   \fn QOculusRift::FirmwareVersion QOculusRift::firmwareVersion() const
   \brief Returns the device's firmware version.
*/
/*!
   \fn unsigned int QOculusRift::supportedHmdCapabilities() const
   \brief Returns the device's supported HMD capability bits.
*/
/*!
   \fn unsigned int QOculusRift::supportedTrackingCapabilities() const
   \brief Returns the device's supported tracking capability bits.
*/
/*!
   \fn unsigned int QOculusRift::supportedDistortionCapabilities() const
   \brief Returns the device's supported distortion capability bits.
*/
/*!
   \fn QPoint QOculusRift::windowPosition() const
   \brief Returns the location of the monitor window on the screen.

   If this feature is not supported by the system, then \c {QPoint(0, 0)} is returned.
*/
/*!
   \fn std::array<ovrFovPort, ovrEye_Count> QOculusRift::recommendedFov() const
   \brief Returns the recommended optical field of view (FOV) for each eyes.
*/
/*!
   \fn std::array<ovrFovPort, ovrEye_Count> QOculusRift::maximumFov() const
   \brief Returns the maximum optical field of view (FOV) for each eyes.
*/
/*!
   \fn QString QOculusRift::systemName() const
   \brief Returns the device's system specific display name.
*/
/*!
   \fn const int& QOculusRift::systemId() const
   \brief Returns the device's system specific display identifier.
*/
